#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,a,n) for(int i = (a);i<(n);i++)
typedef pair <int,int> pII;
#define fi first
#define se second
const int INF = 0x3f3f3f3f;
//head
const int maxn = 1e2 + 5;
int head[maxn];
struct node{
    int to,next;
}G[maxn*maxn*2];
int cnt = 0;
void add(int from,int to){
    G[cnt].to = to;
    G[cnt].next = head[from];
    head[from] = cnt++;
}
int m, n, u, v;
int vis[maxn];
double ans = 0;
ll dis1[maxn];
ll disn[maxn];
int dd[maxn];
int d[maxn];
bool minpath[maxn];
void bfs(){
    rep(i,0,n+1) d[i] = INF;
    d[1] = 0;
    dis1[1] = 1;
    queue <int>q;
    q.push(1);
    int maxdeep;
    while(!q.empty()){
        int u = q.front();
        q.pop();
        for(int i = head[u];~i;i=G[i].next){
            int to = G[i].to;
            if(d[to]>d[u]+1){
                d[to] = d[u] + 1;
                dis1[to] = dis1[u];
                q.push(to);
            }else if(d[to] == d[u]+1){
                dis1[to] += dis1[u];
            }
        }
    }
    rep(i,0,n+1) dd[i]=INF;
    dd[n] = 0;
    disn[n] = 1;
    q.push(n);
    while(!q.empty()){
        int u = q.front();
        q.pop();
        for(int i = head[u];~i;i=G[i].next){
            int to = G[i].to;
            if(dd[to] > dd[u] + 1){
                dd[to] = dd[u]+1;
                disn[to] = disn[u];
                q.push(to);
            }else if(dd[to] == dd[u]+1){
                disn[to] += disn[u];
            }
        }
    }
    //cout<<maxdeep<<endl;
    rep(i,2,n){
        if(d[i]+dd[i] == d[n])
            minpath[i] = 1;
    }
}
int main(){
#ifdef LOCAL
    freopen("pps.in","r",stdin);
#endif
    scanf("%d%d",&n,&m);
    memset(head,-1,sizeof(head));
    rep(i,0,m){
        scanf("%d%d",&u,&v);
        add(u,v);add(v,u);
    }
    long long ans = 1;
    bfs();
    rep(i,1,n+1){
        long long temp = 0;
        if(minpath[i]){
            temp = dis1[i]*disn[i]*2;
        }
        if(i==1 || i==n)
            temp = dis1[i]*disn[i];
        ans = max(ans,temp);
    }
    //cout<<ans<<endl;
    double res = (double)(ans) / dis1[n];
    printf("%0.15f\n",res);
    return 0;
}
